main :: IO()
main = do
 print 4

{- Зад. 1. Да се напише функция, която намира броя на елементите на списък. -}

{- Зад. 2. Да се напише функция, която намира сумата на елементите в списък. -}

{- Зад. 3. Да се напише функция, която намира дали даден елемент се
           съдържа в списък -}

{- Зад. 4. Да се напише функция, която генерира списък с простите числа
           в интервала [a,b]. -}

{- Зад. 5. Да се напише функция, която премахва първият елемент равен на
           x от даден списък. -}
           
{- Зад. 6. Да се напише функция, която премахва всички елементи,
           които са равни на x от даден списък. -}

---------------------------------------------------------

NOTES:
VECTORS
 They can hold different types.
 They have a fixed size.

 f :: (Int, Double) -> Double
 f (i, m)
  | i > 10    = 2 * m
  | i < 5     = 3 * m
  | otherwise = m

 f2 :: (Int, Double) -> Double --return the second element of a tuple
 f2 (_, m) = m

 f3 :: (Int, Double) -> Double --return the second element of a tuple
 f3 (1, _) = (2, 3.5)
 f3 v@(2, m) = (2, m) --or you can return v --on time it can be reffered as v and secondly it is referred  as (2, _)
 f3 _ = (4, 5.5)

LISTS:
 - infinite number of arguments
 - doesn't have a fixed size
 - can store only one type, homogeneous

 v2 :: [Int]
 v2 = [1, 2, 3, 4, 5] -- this is not an array, you cannot change these values. If you wanted to do it you would have to create another list that is this one but filtered
 v3 :: [[Int]]

 v4 :: [[[[[Int]]]]
 v4 = [] --this will work it is a valid definition

null -- function which checks whether a list is empty
null :: [Int] -> Bool
null [] = True
null _ = False

 head' :: [Int] -> Int
 head' (p:_) = p

 tail' :: [Int] -> [Int]
 tail' (_:ps) = p -- evetything related to lists has to end with s

--
f5 :: [Int] -> [Int]
f5 [] = 1
f5 [1] = [2, 3]
f5 [x, y] = [5]
f5 (x::_) = [6] -- if at least has one argument 
f5 (x:y::xs) = [7] -- this will never compile because the upper line shadows it it will always be true
f5 (_:_:_:x:_) = [x]
f5 xs@(:_:_:_:_) = xs
f5 xs = xs
-- print the first 2
f5 (x:y:z:t:xs) = [x, y]
f5 (x:y:xs) = [x, y]
f5(_:_:z:t:xs) = z:t:xs -- xs is a list, that can be empty z:t4:5:[] [] was 7 will not compile
